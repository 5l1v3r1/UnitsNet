<#@ assembly name="$(TargetDir)UnitsNet.net35.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="UnitsNet" #>
<#@ import namespace="UnitsNet.Attributes" #><#+

    private void GenerateUnitValueTests(Dictionary<Unit, UnitAttribute> unitToAttribute)
    {
#>
// Copyright © 2007 by Initial Force AS.  All rights reserved.
// https://github.com/InitialForce/SIUnits
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using NUnit.Framework;

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests.net35
{
    [TestFixture]
    public class UnitValueTests
    {
        [Test]
        public void TryConvertReturnsFalseOnIncompatibleUnits()
        {
<#+
        /* Example:
            double newValue;
            Assert.False(new UnitValue(1, Unit.SquareMeter).TryConvert(Unit.Second, out newValue));
            Assert.False(new UnitValue(1, Unit.CubicMeter).TryConvert(Unit.Second, out newValue));
            Assert.False(new UnitValue(1, Unit.Newton).TryConvert(Unit.Second, out newValue));
            Assert.False(new UnitValue(1, Unit.Pascal).TryConvert(Unit.Second, out newValue));
            Assert.False(new UnitValue(1, Unit.Kilogram).TryConvert(Unit.Second, out newValue));
            Assert.False(new UnitValue(1, Unit.Degree).TryConvert(Unit.Second, out newValue));
            Assert.False(new UnitValue(1, Unit.CubicMeterPerSecond).TryConvert(Unit.Second, out newValue));
            Assert.False(new UnitValue(1, Unit.RevolutionPerSecond).TryConvert(Unit.Second, out newValue));
            */
	PushIndent("            ");
        WriteLine("double newValue;");
        foreach (Unit baseUnit in unitToAttribute.Values.Select(attr => attr.BaseUnit).Distinct())
        {
            WriteLine("Assert.False(new UnitValue(1, Unit.{0}).TryConvert(Unit.Second, out newValue));",
                baseUnit);
        }
        PopIndent();
        #>
        }
    }
}
<#+
    }
#>