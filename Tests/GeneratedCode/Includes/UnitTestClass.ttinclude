<#@ assembly name="$(TargetDir)UnitsNet.net35.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="UnitsNet.Units" #>
<#@ import namespace="UnitsNet.Attributes" #>
<#@ import namespace="UnitsNet.GeneratedCode" #>
<#@ include file="..\..\..\Src\UnitsNet\GeneratedCode\Includes\MultipleOutputHelper.ttinclude" once="true"#><#+

    private void GenerateTestClass(Manager manager, string className, string baseUnitName, string baseUnitPluralName, IList<UnitInfo> orderedClassUnits)
    {
        using (manager.StartNewFile(className+"TestsBase.g.cs"))
        {
            /*object[] orderedClassUnits = unitToAttribute
                .Keys
                .OrderBy(unit => unit.ToString())
                .ToArray();*/

            string baseUnitVariableName = baseUnitName.ToLowerInvariant();
#>
// Copyright © 2007 by Initial Force AS.  All rights reserved.
// https://github.com/InitialForce/SIUnits
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using NUnit.Framework;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of <#=className#>.
    /// </summary>
    [TestFixture]
    public abstract partial class <#=className#>TestsBase
    {
        protected virtual double Delta { get { return 1E-5; } }

<#+
            foreach (UnitInfo unit in orderedClassUnits)
            {
                string unitPluralName = unit.PluralName;

        // Example:
        // protected abstract double OneMeterInKilometers { get; } 
#>
        public abstract double <#=unitPluralName#>InOne<#=baseUnitName#> { get; }
<#+         }
#>

        [Test]
        public void <#=baseUnitName#>To<#=className#>Units()
        {
            <#=className#> <#=baseUnitVariableName#> = <#=className#>.From<#=baseUnitPluralName#>(1);
<#+
            foreach (UnitInfo unit in orderedClassUnits)
            {
                string unitPluralName = unit.PluralName;
                /*
        Example:
            Assert.AreEqual(OneMeterInKilometers, meter.Kilometers, Delta);
        */
#>
            Assert.AreEqual(<#=unitPluralName#>InOne<#=baseUnitName#>, <#=baseUnitVariableName#>.<#=unitPluralName#>, Delta);
<#+         }
#>
        }

        [Test]
        public void ConversionRoundTrip()
        {
            <#=className#> <#=baseUnitVariableName#> = <#=className#>.From<#=baseUnitPluralName#>(1); 
<#+
            foreach (UnitInfo unit in orderedClassUnits)
            {
                string unitPluralName = unit.PluralName;
                /*
        Example:
            Assert.AreEqual(1, Length.FromKilometers(meter.Kilometers).Meters, Delta);
        */
#>
            Assert.AreEqual(1, <#=className#>.From<#=unitPluralName#>(<#=baseUnitVariableName#>.<#=unitPluralName#>).<#=baseUnitPluralName#>, Delta);
<#+         }
#>
        }

        [Test]
        public void ArithmeticOperators()
        {
            <#=className#> v = <#=className#>.From<#=baseUnitPluralName#>(1);
            Assert.AreEqual(-1, -v.<#=baseUnitPluralName#>, Delta);
            Assert.AreEqual(2, (<#=className#>.From<#=baseUnitPluralName#>(3)-v).<#=baseUnitPluralName#>, Delta);
            Assert.AreEqual(2, (v + v).<#=baseUnitPluralName#>, Delta);
            Assert.AreEqual(10, (v*10).<#=baseUnitPluralName#>, Delta);
            Assert.AreEqual(10, (10*v).<#=baseUnitPluralName#>, Delta);
            Assert.AreEqual(2, (<#=className#>.From<#=baseUnitPluralName#>(10)/5).<#=baseUnitPluralName#>, Delta);
            Assert.AreEqual(2, <#=className#>.From<#=baseUnitPluralName#>(10)/<#=className#>.From<#=baseUnitPluralName#>(5), Delta);
        }

        [Test]
        public void ComparisonOperators()
        {
            <#=className#> one<#=baseUnitName#> = <#=className#>.From<#=baseUnitPluralName#>(1);
            <#=className#> two<#=baseUnitPluralName#> = <#=className#>.From<#=baseUnitPluralName#>(2);

            Assert.True(one<#=baseUnitName#> < two<#=baseUnitPluralName#>);
            Assert.True(one<#=baseUnitName#> <= two<#=baseUnitPluralName#>);
            Assert.True(two<#=baseUnitPluralName#> > one<#=baseUnitName#>);
            Assert.True(two<#=baseUnitPluralName#> >= one<#=baseUnitName#>);

            Assert.False(one<#=baseUnitName#> > two<#=baseUnitPluralName#>);
            Assert.False(one<#=baseUnitName#> >= two<#=baseUnitPluralName#>);
            Assert.False(two<#=baseUnitPluralName#> < one<#=baseUnitName#>);
            Assert.False(two<#=baseUnitPluralName#> <= one<#=baseUnitName#>);
        }

        [Test]
        public void CompareToIsImplemented()
        {
            <#=className#> <#=baseUnitVariableName#> = <#=className#>.From<#=baseUnitPluralName#>(1);
            Assert.AreEqual(0, <#=baseUnitVariableName#>.CompareTo(<#=baseUnitVariableName#>));
            Assert.Greater(<#=baseUnitVariableName#>.CompareTo(<#=className#>.Zero), 0);
            Assert.Less(<#=className#>.Zero.CompareTo(<#=baseUnitVariableName#>), 0);
        }

        [Test]
        [ExpectedException(typeof(ArgumentException))]
        public void CompareToThrowsOnTypeMismatch()
        {
            <#=className#> <#=baseUnitVariableName#> = <#=className#>.From<#=baseUnitPluralName#>(1);
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            <#=baseUnitVariableName#>.CompareTo(new object());
        }

        [Test]
        [ExpectedException(typeof(ArgumentNullException))]
        public void CompareToThrowsOnNull()
        { 
            <#=className#> <#=baseUnitVariableName#> = <#=className#>.From<#=baseUnitPluralName#>(1);
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            <#=baseUnitVariableName#>.CompareTo(null);
        }


        [Test]
        public void EqualityOperators()
        {
            <#=className#> a = <#=className#>.From<#=baseUnitPluralName#>(1);
            <#=className#> b = <#=className#>.From<#=baseUnitPluralName#>(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a); 
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Test]
        public void EqualsIsImplemented()
        {
            <#=className#> v = <#=className#>.From<#=baseUnitPluralName#>(1);
            Assert.IsTrue(v.Equals(<#=className#>.From<#=baseUnitPluralName#>(1)));
            Assert.IsFalse(v.Equals(<#=className#>.Zero));
        }

        [Test]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            <#=className#> <#=baseUnitVariableName#> = <#=className#>.From<#=baseUnitPluralName#>(1);
            Assert.IsFalse(<#=baseUnitVariableName#>.Equals(new object()));
        }

        [Test]
        public void EqualsReturnsFalseOnNull()
        {
            <#=className#> <#=baseUnitVariableName#> = <#=className#>.From<#=baseUnitPluralName#>(1);
            Assert.IsFalse(<#=baseUnitVariableName#>.Equals(null));
        }
    }
}
<#+
        } // using (manager.StartNewFile(className+"TestsBase.generated.cs"))
    } // private void GenerateTestClass(Type unitAttributeType, Manager manager, string className, TUnit baseUnit) 
#>