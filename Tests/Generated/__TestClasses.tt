<#@ template debug="True" language="C#" hostspecific="True" #>
<#@ assembly name="$(TargetDir)..\..\..\build\bin\AnyCPU_Debug\UnitsNet.net35.dll" #>
<#//@ assembly name="UnitsNet.net35.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="TestClass.ttinclude" once="true"#>
<# 
// This causes a duplicate definition error because UnitClass.ttinclude also includes it: 
// @ include file="MultipleOutputHelper.ttinclude" once="true" #>
<# // Disable output of this file, note this causes a build warning #>
<#@ output extension="/" #>
<#//@ output extension=".cs" #> 
<# 
    
    var m = Manager.Create(Host, GenerationEnvironment);

    foreach (string unitClassName in GetUnitClassNames())
    {
        Type unitAttributeType = typeof (Unit).Assembly.GetType("UnitsNet." + unitClassName+"Attribute");
        
	// Class implementation not found, skip for now to avoid catch-22 situation where we can't run template due to compile errors.
	if (unitAttributeType == null)
            continue;
        Unit baseUnit = (Unit) unitAttributeType.GetField("BaseUnit").GetRawConstantValue();
 //       Dictionary<Unit, UnitAttribute> unitToAttributeDictionary = GetUnitToAttributeDictionary(unitAttributeType);
        GenerateTestClass(unitAttributeType, m, unitClassName, baseUnit);
    }
    
    m.Process(split: true);
#>
