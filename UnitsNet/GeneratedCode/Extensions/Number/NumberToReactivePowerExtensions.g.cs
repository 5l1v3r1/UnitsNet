//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

#if !WINDOWS_UWP
// Extension methods/overloads not supported in Universal Windows Platform (WinRT Components)
namespace UnitsNet.Extensions.NumberToReactivePower
{
    public static class NumberToReactivePowerExtensions
    {
        #region KilovoltAmpereReactive

        /// <inheritdoc cref="ReactivePower.FromKilovoltAmpereReactives(double)"/>
        public static ReactivePower KilovoltAmpereReactives(this int value) => ReactivePower.FromKilovoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromKilovoltAmpereReactives(double?)"/>
        public static ReactivePower? KilovoltAmpereReactives(this int? value) => ReactivePower.FromKilovoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromKilovoltAmpereReactives(double)"/>
        public static ReactivePower KilovoltAmpereReactives(this long value) => ReactivePower.FromKilovoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromKilovoltAmpereReactives(double?)"/>
        public static ReactivePower? KilovoltAmpereReactives(this long? value) => ReactivePower.FromKilovoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromKilovoltAmpereReactives(double)"/>
        public static ReactivePower KilovoltAmpereReactives(this double value) => ReactivePower.FromKilovoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromKilovoltAmpereReactives(double?)"/>
        public static ReactivePower? KilovoltAmpereReactives(this double? value) => ReactivePower.FromKilovoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromKilovoltAmpereReactives(double)"/>
        public static ReactivePower KilovoltAmpereReactives(this float value) => ReactivePower.FromKilovoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromKilovoltAmpereReactives(double?)"/>
        public static ReactivePower? KilovoltAmpereReactives(this float? value) => ReactivePower.FromKilovoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromKilovoltAmpereReactives(double)"/>
        public static ReactivePower KilovoltAmpereReactives(this decimal value) => ReactivePower.FromKilovoltAmpereReactives(Convert.ToDouble(value));

        /// <inheritdoc cref="ReactivePower.FromKilovoltAmpereReactives(double?)"/>
        public static ReactivePower? KilovoltAmpereReactives(this decimal? value) => ReactivePower.FromKilovoltAmpereReactives(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MegavoltAmpereReactive

        /// <inheritdoc cref="ReactivePower.FromMegavoltAmpereReactives(double)"/>
        public static ReactivePower MegavoltAmpereReactives(this int value) => ReactivePower.FromMegavoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromMegavoltAmpereReactives(double?)"/>
        public static ReactivePower? MegavoltAmpereReactives(this int? value) => ReactivePower.FromMegavoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromMegavoltAmpereReactives(double)"/>
        public static ReactivePower MegavoltAmpereReactives(this long value) => ReactivePower.FromMegavoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromMegavoltAmpereReactives(double?)"/>
        public static ReactivePower? MegavoltAmpereReactives(this long? value) => ReactivePower.FromMegavoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromMegavoltAmpereReactives(double)"/>
        public static ReactivePower MegavoltAmpereReactives(this double value) => ReactivePower.FromMegavoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromMegavoltAmpereReactives(double?)"/>
        public static ReactivePower? MegavoltAmpereReactives(this double? value) => ReactivePower.FromMegavoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromMegavoltAmpereReactives(double)"/>
        public static ReactivePower MegavoltAmpereReactives(this float value) => ReactivePower.FromMegavoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromMegavoltAmpereReactives(double?)"/>
        public static ReactivePower? MegavoltAmpereReactives(this float? value) => ReactivePower.FromMegavoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromMegavoltAmpereReactives(double)"/>
        public static ReactivePower MegavoltAmpereReactives(this decimal value) => ReactivePower.FromMegavoltAmpereReactives(Convert.ToDouble(value));

        /// <inheritdoc cref="ReactivePower.FromMegavoltAmpereReactives(double?)"/>
        public static ReactivePower? MegavoltAmpereReactives(this decimal? value) => ReactivePower.FromMegavoltAmpereReactives(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region VoltAmpereReactive

        /// <inheritdoc cref="ReactivePower.FromVoltAmpereReactives(double)"/>
        public static ReactivePower VoltAmpereReactives(this int value) => ReactivePower.FromVoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromVoltAmpereReactives(double?)"/>
        public static ReactivePower? VoltAmpereReactives(this int? value) => ReactivePower.FromVoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromVoltAmpereReactives(double)"/>
        public static ReactivePower VoltAmpereReactives(this long value) => ReactivePower.FromVoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromVoltAmpereReactives(double?)"/>
        public static ReactivePower? VoltAmpereReactives(this long? value) => ReactivePower.FromVoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromVoltAmpereReactives(double)"/>
        public static ReactivePower VoltAmpereReactives(this double value) => ReactivePower.FromVoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromVoltAmpereReactives(double?)"/>
        public static ReactivePower? VoltAmpereReactives(this double? value) => ReactivePower.FromVoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromVoltAmpereReactives(double)"/>
        public static ReactivePower VoltAmpereReactives(this float value) => ReactivePower.FromVoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromVoltAmpereReactives(double?)"/>
        public static ReactivePower? VoltAmpereReactives(this float? value) => ReactivePower.FromVoltAmpereReactives(value);

        /// <inheritdoc cref="ReactivePower.FromVoltAmpereReactives(double)"/>
        public static ReactivePower VoltAmpereReactives(this decimal value) => ReactivePower.FromVoltAmpereReactives(Convert.ToDouble(value));

        /// <inheritdoc cref="ReactivePower.FromVoltAmpereReactives(double?)"/>
        public static ReactivePower? VoltAmpereReactives(this decimal? value) => ReactivePower.FromVoltAmpereReactives(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
