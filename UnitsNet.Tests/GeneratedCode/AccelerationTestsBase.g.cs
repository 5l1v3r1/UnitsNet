//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Acceleration.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class AccelerationTestsBase
    {
        protected abstract double CentimetersPerSecondSquaredInOneMetersPerSecondSquared { get; }
        protected abstract double DecimetersPerSecondSquaredInOneMetersPerSecondSquared { get; }
        protected abstract double FeetPerSecondSquaredInOneMetersPerSecondSquared { get; }
        protected abstract double InchesPerSecondSquaredInOneMetersPerSecondSquared { get; }
        protected abstract double KilometersPerSecondSquaredInOneMetersPerSecondSquared { get; }
        protected abstract double KnotsPerHourInOneMetersPerSecondSquared { get; }
        protected abstract double KnotsPerMinuteInOneMetersPerSecondSquared { get; }
        protected abstract double KnotsPerSecondInOneMetersPerSecondSquared { get; }
        protected abstract double MetersPerSecondSquaredInOneMetersPerSecondSquared { get; }
        protected abstract double MicrometersPerSecondSquaredInOneMetersPerSecondSquared { get; }
        protected abstract double MillimetersPerSecondSquaredInOneMetersPerSecondSquared { get; }
        protected abstract double NanometersPerSecondSquaredInOneMetersPerSecondSquared { get; }
        protected abstract double StandardGravityInOneMetersPerSecondSquared { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentimetersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double DecimetersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double FeetPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double InchesPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double KnotsPerHourTolerance { get { return 1e-5; } }
        protected virtual double KnotsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KnotsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MetersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double MicrometersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double NanometersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double StandardGravityTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void MetersPerSecondSquaredToAccelerationUnits()
        {
            Acceleration MetersPerSecondSquared = Acceleration.FromMetersPerSecondSquared(1);
            AssertEx.EqualTolerance(CentimetersPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.CentimetersPerSecondSquared, CentimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.DecimetersPerSecondSquared, DecimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(FeetPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.FeetPerSecondSquared, FeetPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(InchesPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.InchesPerSecondSquared, InchesPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.KilometersPerSecondSquared, KilometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(KnotsPerHourInOneMetersPerSecondSquared, MetersPerSecondSquared.KnotsPerHour, KnotsPerHourTolerance);
            AssertEx.EqualTolerance(KnotsPerMinuteInOneMetersPerSecondSquared, MetersPerSecondSquared.KnotsPerMinute, KnotsPerMinuteTolerance);
            AssertEx.EqualTolerance(KnotsPerSecondInOneMetersPerSecondSquared, MetersPerSecondSquared.KnotsPerSecond, KnotsPerSecondTolerance);
            AssertEx.EqualTolerance(MetersPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.MicrometersPerSecondSquared, MicrometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.MillimetersPerSecondSquared, MillimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.NanometersPerSecondSquared, NanometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(StandardGravityInOneMetersPerSecondSquared, MetersPerSecondSquared.StandardGravity, StandardGravityTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Acceleration.From(1, AccelerationUnit.CentiMetersPerSecondSquared).CentimetersPerSecondSquared, CentimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.From(1, AccelerationUnit.DeciMetersPerSecondSquared).DecimetersPerSecondSquared, DecimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.From(1, AccelerationUnit.FootPerSecondSquared).FeetPerSecondSquared, FeetPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.From(1, AccelerationUnit.InchPerSecondSquared).InchesPerSecondSquared, InchesPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.From(1, AccelerationUnit.KiloMetersPerSecondSquared).KilometersPerSecondSquared, KilometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.From(1, AccelerationUnit.KnotPerHour).KnotsPerHour, KnotsPerHourTolerance);
            AssertEx.EqualTolerance(1, Acceleration.From(1, AccelerationUnit.KnotPerMinute).KnotsPerMinute, KnotsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Acceleration.From(1, AccelerationUnit.KnotPerSecond).KnotsPerSecond, KnotsPerSecondTolerance);
            AssertEx.EqualTolerance(1, Acceleration.From(1, AccelerationUnit.MetersPerSecondSquared).MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.From(1, AccelerationUnit.MicroMetersPerSecondSquared).MicrometersPerSecondSquared, MicrometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.From(1, AccelerationUnit.MilliMetersPerSecondSquared).MillimetersPerSecondSquared, MillimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.From(1, AccelerationUnit.NanoMetersPerSecondSquared).NanometersPerSecondSquared, NanometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.From(1, AccelerationUnit.StandardGravity).StandardGravity, StandardGravityTolerance);
        }

        [Fact]
        public void As()
        {
            var MetersPerSecondSquared = Acceleration.FromMetersPerSecondSquared(1);
            AssertEx.EqualTolerance(CentimetersPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.As(AccelerationUnit.CentiMetersPerSecondSquared), CentimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.As(AccelerationUnit.DeciMetersPerSecondSquared), DecimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(FeetPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.As(AccelerationUnit.FootPerSecondSquared), FeetPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(InchesPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.As(AccelerationUnit.InchPerSecondSquared), InchesPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.As(AccelerationUnit.KiloMetersPerSecondSquared), KilometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(KnotsPerHourInOneMetersPerSecondSquared, MetersPerSecondSquared.As(AccelerationUnit.KnotPerHour), KnotsPerHourTolerance);
            AssertEx.EqualTolerance(KnotsPerMinuteInOneMetersPerSecondSquared, MetersPerSecondSquared.As(AccelerationUnit.KnotPerMinute), KnotsPerMinuteTolerance);
            AssertEx.EqualTolerance(KnotsPerSecondInOneMetersPerSecondSquared, MetersPerSecondSquared.As(AccelerationUnit.KnotPerSecond), KnotsPerSecondTolerance);
            AssertEx.EqualTolerance(MetersPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.As(AccelerationUnit.MetersPerSecondSquared), MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.As(AccelerationUnit.MicroMetersPerSecondSquared), MicrometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.As(AccelerationUnit.MilliMetersPerSecondSquared), MillimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondSquaredInOneMetersPerSecondSquared, MetersPerSecondSquared.As(AccelerationUnit.NanoMetersPerSecondSquared), NanometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(StandardGravityInOneMetersPerSecondSquared, MetersPerSecondSquared.As(AccelerationUnit.StandardGravity), StandardGravityTolerance);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Acceleration MetersPerSecondSquared = Acceleration.FromMetersPerSecondSquared(1);
            AssertEx.EqualTolerance(1, Acceleration.FromCentimetersPerSecondSquared(MetersPerSecondSquared.CentimetersPerSecondSquared).MetersPerSecondSquared, CentimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromDecimetersPerSecondSquared(MetersPerSecondSquared.DecimetersPerSecondSquared).MetersPerSecondSquared, DecimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromFeetPerSecondSquared(MetersPerSecondSquared.FeetPerSecondSquared).MetersPerSecondSquared, FeetPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromInchesPerSecondSquared(MetersPerSecondSquared.InchesPerSecondSquared).MetersPerSecondSquared, InchesPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromKilometersPerSecondSquared(MetersPerSecondSquared.KilometersPerSecondSquared).MetersPerSecondSquared, KilometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromKnotsPerHour(MetersPerSecondSquared.KnotsPerHour).MetersPerSecondSquared, KnotsPerHourTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromKnotsPerMinute(MetersPerSecondSquared.KnotsPerMinute).MetersPerSecondSquared, KnotsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromKnotsPerSecond(MetersPerSecondSquared.KnotsPerSecond).MetersPerSecondSquared, KnotsPerSecondTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromMetersPerSecondSquared(MetersPerSecondSquared.MetersPerSecondSquared).MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromMicrometersPerSecondSquared(MetersPerSecondSquared.MicrometersPerSecondSquared).MetersPerSecondSquared, MicrometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromMillimetersPerSecondSquared(MetersPerSecondSquared.MillimetersPerSecondSquared).MetersPerSecondSquared, MillimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromNanometersPerSecondSquared(MetersPerSecondSquared.NanometersPerSecondSquared).MetersPerSecondSquared, NanometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromStandardGravity(MetersPerSecondSquared.StandardGravity).MetersPerSecondSquared, StandardGravityTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Acceleration v = Acceleration.FromMetersPerSecondSquared(1);
            AssertEx.EqualTolerance(-1, -v.MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(2, (Acceleration.FromMetersPerSecondSquared(3)-v).MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(2, (v + v).MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(10, (v*10).MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(10, (10*v).MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(2, (Acceleration.FromMetersPerSecondSquared(10)/5).MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(2, Acceleration.FromMetersPerSecondSquared(10)/Acceleration.FromMetersPerSecondSquared(5), MetersPerSecondSquaredTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Acceleration oneMeterPerSecondSquared = Acceleration.FromMetersPerSecondSquared(1);
            Acceleration twoMetersPerSecondSquared = Acceleration.FromMetersPerSecondSquared(2);

            Assert.True(oneMeterPerSecondSquared < twoMetersPerSecondSquared);
            Assert.True(oneMeterPerSecondSquared <= twoMetersPerSecondSquared);
            Assert.True(twoMetersPerSecondSquared > oneMeterPerSecondSquared);
            Assert.True(twoMetersPerSecondSquared >= oneMeterPerSecondSquared);

            Assert.False(oneMeterPerSecondSquared > twoMetersPerSecondSquared);
            Assert.False(oneMeterPerSecondSquared >= twoMetersPerSecondSquared);
            Assert.False(twoMetersPerSecondSquared < oneMeterPerSecondSquared);
            Assert.False(twoMetersPerSecondSquared <= oneMeterPerSecondSquared);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Acceleration MetersPerSecondSquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.Equal(0, MetersPerSecondSquared.CompareTo(MetersPerSecondSquared));
            Assert.True(MetersPerSecondSquared.CompareTo(Acceleration.Zero) > 0);
            Assert.True(Acceleration.Zero.CompareTo(MetersPerSecondSquared) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Acceleration MetersPerSecondSquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.Throws<ArgumentException>(() => MetersPerSecondSquared.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Acceleration MetersPerSecondSquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.Throws<ArgumentNullException>(() => MetersPerSecondSquared.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            Acceleration a = Acceleration.FromMetersPerSecondSquared(1);
            Acceleration b = Acceleration.FromMetersPerSecondSquared(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            Acceleration v = Acceleration.FromMetersPerSecondSquared(1);
            Assert.True(v.Equals(Acceleration.FromMetersPerSecondSquared(1), Acceleration.FromMetersPerSecondSquared(MetersPerSecondSquaredTolerance)));
            Assert.False(v.Equals(Acceleration.Zero, Acceleration.FromMetersPerSecondSquared(MetersPerSecondSquaredTolerance)));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Acceleration MetersPerSecondSquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.False(MetersPerSecondSquared.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Acceleration MetersPerSecondSquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.False(MetersPerSecondSquared.Equals(null));
        }
    }
}
