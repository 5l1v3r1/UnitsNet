//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using NUnit.Framework;
using UnitsNet.Units;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of DcElectricPotential.
    /// </summary>
    [TestFixture]
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class DcElectricPotentialTestsBase
    {
        protected abstract double KilovoltDcsInOneVoltDc { get; }
        protected abstract double MegavoltDcsInOneVoltDc { get; }
        protected abstract double MicrovoltDcsInOneVoltDc { get; }
        protected abstract double MillivoltDcsInOneVoltDc { get; }
        protected abstract double VoltDcsInOneVoltDc { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilovoltDcsTolerance { get { return 1e-5; } }
        protected virtual double MegavoltDcsTolerance { get { return 1e-5; } }
        protected virtual double MicrovoltDcsTolerance { get { return 1e-5; } }
        protected virtual double MillivoltDcsTolerance { get { return 1e-5; } }
        protected virtual double VoltDcsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Test]
        public void VoltDcToDcElectricPotentialUnits()
        {
            DcElectricPotential voltdc = DcElectricPotential.FromVoltDcs(1);
            Assert.AreEqual(KilovoltDcsInOneVoltDc, voltdc.KilovoltDcs, KilovoltDcsTolerance);
            Assert.AreEqual(MegavoltDcsInOneVoltDc, voltdc.MegavoltDcs, MegavoltDcsTolerance);
            Assert.AreEqual(MicrovoltDcsInOneVoltDc, voltdc.MicrovoltDcs, MicrovoltDcsTolerance);
            Assert.AreEqual(MillivoltDcsInOneVoltDc, voltdc.MillivoltDcs, MillivoltDcsTolerance);
            Assert.AreEqual(VoltDcsInOneVoltDc, voltdc.VoltDcs, VoltDcsTolerance);
        }

        [Test]
        public void FromValueAndUnit()
        {
            Assert.AreEqual(1, DcElectricPotential.From(1, DcElectricPotentialUnit.KilovoltDc).KilovoltDcs, KilovoltDcsTolerance);
            Assert.AreEqual(1, DcElectricPotential.From(1, DcElectricPotentialUnit.MegavoltDc).MegavoltDcs, MegavoltDcsTolerance);
            Assert.AreEqual(1, DcElectricPotential.From(1, DcElectricPotentialUnit.MicrovoltDc).MicrovoltDcs, MicrovoltDcsTolerance);
            Assert.AreEqual(1, DcElectricPotential.From(1, DcElectricPotentialUnit.MillivoltDc).MillivoltDcs, MillivoltDcsTolerance);
            Assert.AreEqual(1, DcElectricPotential.From(1, DcElectricPotentialUnit.VoltDc).VoltDcs, VoltDcsTolerance);
        }

        [Test]
        public void As()
        {
            var voltdc = DcElectricPotential.FromVoltDcs(1);
            Assert.AreEqual(KilovoltDcsInOneVoltDc, voltdc.As(DcElectricPotentialUnit.KilovoltDc), KilovoltDcsTolerance);
            Assert.AreEqual(MegavoltDcsInOneVoltDc, voltdc.As(DcElectricPotentialUnit.MegavoltDc), MegavoltDcsTolerance);
            Assert.AreEqual(MicrovoltDcsInOneVoltDc, voltdc.As(DcElectricPotentialUnit.MicrovoltDc), MicrovoltDcsTolerance);
            Assert.AreEqual(MillivoltDcsInOneVoltDc, voltdc.As(DcElectricPotentialUnit.MillivoltDc), MillivoltDcsTolerance);
            Assert.AreEqual(VoltDcsInOneVoltDc, voltdc.As(DcElectricPotentialUnit.VoltDc), VoltDcsTolerance);
        }

        [Test]
        public void ConversionRoundTrip()
        {
            DcElectricPotential voltdc = DcElectricPotential.FromVoltDcs(1);
            Assert.AreEqual(1, DcElectricPotential.FromKilovoltDcs(voltdc.KilovoltDcs).VoltDcs, KilovoltDcsTolerance);
            Assert.AreEqual(1, DcElectricPotential.FromMegavoltDcs(voltdc.MegavoltDcs).VoltDcs, MegavoltDcsTolerance);
            Assert.AreEqual(1, DcElectricPotential.FromMicrovoltDcs(voltdc.MicrovoltDcs).VoltDcs, MicrovoltDcsTolerance);
            Assert.AreEqual(1, DcElectricPotential.FromMillivoltDcs(voltdc.MillivoltDcs).VoltDcs, MillivoltDcsTolerance);
            Assert.AreEqual(1, DcElectricPotential.FromVoltDcs(voltdc.VoltDcs).VoltDcs, VoltDcsTolerance);
        }

        [Test]
        public void ArithmeticOperators()
        {
            DcElectricPotential v = DcElectricPotential.FromVoltDcs(1);
            Assert.AreEqual(-1, -v.VoltDcs, VoltDcsTolerance);
            Assert.AreEqual(2, (DcElectricPotential.FromVoltDcs(3)-v).VoltDcs, VoltDcsTolerance);
            Assert.AreEqual(2, (v + v).VoltDcs, VoltDcsTolerance);
            Assert.AreEqual(10, (v*10).VoltDcs, VoltDcsTolerance);
            Assert.AreEqual(10, (10*v).VoltDcs, VoltDcsTolerance);
            Assert.AreEqual(2, (DcElectricPotential.FromVoltDcs(10)/5).VoltDcs, VoltDcsTolerance);
            Assert.AreEqual(2, DcElectricPotential.FromVoltDcs(10)/DcElectricPotential.FromVoltDcs(5), VoltDcsTolerance);
        }

        [Test]
        public void ComparisonOperators()
        {
            DcElectricPotential oneVoltDc = DcElectricPotential.FromVoltDcs(1);
            DcElectricPotential twoVoltDcs = DcElectricPotential.FromVoltDcs(2);

            Assert.True(oneVoltDc < twoVoltDcs);
            Assert.True(oneVoltDc <= twoVoltDcs);
            Assert.True(twoVoltDcs > oneVoltDc);
            Assert.True(twoVoltDcs >= oneVoltDc);

            Assert.False(oneVoltDc > twoVoltDcs);
            Assert.False(oneVoltDc >= twoVoltDcs);
            Assert.False(twoVoltDcs < oneVoltDc);
            Assert.False(twoVoltDcs <= oneVoltDc);
        }

        [Test]
        public void CompareToIsImplemented()
        {
            DcElectricPotential voltdc = DcElectricPotential.FromVoltDcs(1);
            Assert.AreEqual(0, voltdc.CompareTo(voltdc));
            Assert.Greater(voltdc.CompareTo(DcElectricPotential.Zero), 0);
            Assert.Less(DcElectricPotential.Zero.CompareTo(voltdc), 0);
        }

        [Test]
        [ExpectedException(typeof(ArgumentException))]
        public void CompareToThrowsOnTypeMismatch()
        {
            DcElectricPotential voltdc = DcElectricPotential.FromVoltDcs(1);
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            voltdc.CompareTo(new object());
        }

        [Test]
        [ExpectedException(typeof(ArgumentNullException))]
        public void CompareToThrowsOnNull()
        {
            DcElectricPotential voltdc = DcElectricPotential.FromVoltDcs(1);
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            voltdc.CompareTo(null);
        }


        [Test]
        public void EqualityOperators()
        {
            DcElectricPotential a = DcElectricPotential.FromVoltDcs(1);
            DcElectricPotential b = DcElectricPotential.FromVoltDcs(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Test]
        public void EqualsIsImplemented()
        {
            DcElectricPotential v = DcElectricPotential.FromVoltDcs(1);
            Assert.IsTrue(v.Equals(DcElectricPotential.FromVoltDcs(1)));
            Assert.IsFalse(v.Equals(DcElectricPotential.Zero));
        }

        [Test]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            DcElectricPotential voltdc = DcElectricPotential.FromVoltDcs(1);
            Assert.IsFalse(voltdc.Equals(new object()));
        }

        [Test]
        public void EqualsReturnsFalseOnNull()
        {
            DcElectricPotential voltdc = DcElectricPotential.FromVoltDcs(1);
            Assert.IsFalse(voltdc.Equals(null));
        }
    }
}
