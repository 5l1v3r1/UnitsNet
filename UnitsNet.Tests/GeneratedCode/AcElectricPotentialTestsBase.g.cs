//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using NUnit.Framework;
using UnitsNet.Units;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of AcElectricPotential.
    /// </summary>
    [TestFixture]
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class AcElectricPotentialTestsBase
    {
        protected abstract double KilovoltAcsInOneVoltAc { get; }
        protected abstract double MegavoltAcsInOneVoltAc { get; }
        protected abstract double MicrovoltAcsInOneVoltAc { get; }
        protected abstract double MillivoltAcsInOneVoltAc { get; }
        protected abstract double VoltAcsInOneVoltAc { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilovoltAcsTolerance { get { return 1e-5; } }
        protected virtual double MegavoltAcsTolerance { get { return 1e-5; } }
        protected virtual double MicrovoltAcsTolerance { get { return 1e-5; } }
        protected virtual double MillivoltAcsTolerance { get { return 1e-5; } }
        protected virtual double VoltAcsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Test]
        public void VoltAcToAcElectricPotentialUnits()
        {
            AcElectricPotential voltac = AcElectricPotential.FromVoltAcs(1);
            Assert.AreEqual(KilovoltAcsInOneVoltAc, voltac.KilovoltAcs, KilovoltAcsTolerance);
            Assert.AreEqual(MegavoltAcsInOneVoltAc, voltac.MegavoltAcs, MegavoltAcsTolerance);
            Assert.AreEqual(MicrovoltAcsInOneVoltAc, voltac.MicrovoltAcs, MicrovoltAcsTolerance);
            Assert.AreEqual(MillivoltAcsInOneVoltAc, voltac.MillivoltAcs, MillivoltAcsTolerance);
            Assert.AreEqual(VoltAcsInOneVoltAc, voltac.VoltAcs, VoltAcsTolerance);
        }

        [Test]
        public void FromValueAndUnit()
        {
            Assert.AreEqual(1, AcElectricPotential.From(1, AcElectricPotentialUnit.KilovoltAc).KilovoltAcs, KilovoltAcsTolerance);
            Assert.AreEqual(1, AcElectricPotential.From(1, AcElectricPotentialUnit.MegavoltAc).MegavoltAcs, MegavoltAcsTolerance);
            Assert.AreEqual(1, AcElectricPotential.From(1, AcElectricPotentialUnit.MicrovoltAc).MicrovoltAcs, MicrovoltAcsTolerance);
            Assert.AreEqual(1, AcElectricPotential.From(1, AcElectricPotentialUnit.MillivoltAc).MillivoltAcs, MillivoltAcsTolerance);
            Assert.AreEqual(1, AcElectricPotential.From(1, AcElectricPotentialUnit.VoltAc).VoltAcs, VoltAcsTolerance);
        }

        [Test]
        public void As()
        {
            var voltac = AcElectricPotential.FromVoltAcs(1);
            Assert.AreEqual(KilovoltAcsInOneVoltAc, voltac.As(AcElectricPotentialUnit.KilovoltAc), KilovoltAcsTolerance);
            Assert.AreEqual(MegavoltAcsInOneVoltAc, voltac.As(AcElectricPotentialUnit.MegavoltAc), MegavoltAcsTolerance);
            Assert.AreEqual(MicrovoltAcsInOneVoltAc, voltac.As(AcElectricPotentialUnit.MicrovoltAc), MicrovoltAcsTolerance);
            Assert.AreEqual(MillivoltAcsInOneVoltAc, voltac.As(AcElectricPotentialUnit.MillivoltAc), MillivoltAcsTolerance);
            Assert.AreEqual(VoltAcsInOneVoltAc, voltac.As(AcElectricPotentialUnit.VoltAc), VoltAcsTolerance);
        }

        [Test]
        public void ConversionRoundTrip()
        {
            AcElectricPotential voltac = AcElectricPotential.FromVoltAcs(1);
            Assert.AreEqual(1, AcElectricPotential.FromKilovoltAcs(voltac.KilovoltAcs).VoltAcs, KilovoltAcsTolerance);
            Assert.AreEqual(1, AcElectricPotential.FromMegavoltAcs(voltac.MegavoltAcs).VoltAcs, MegavoltAcsTolerance);
            Assert.AreEqual(1, AcElectricPotential.FromMicrovoltAcs(voltac.MicrovoltAcs).VoltAcs, MicrovoltAcsTolerance);
            Assert.AreEqual(1, AcElectricPotential.FromMillivoltAcs(voltac.MillivoltAcs).VoltAcs, MillivoltAcsTolerance);
            Assert.AreEqual(1, AcElectricPotential.FromVoltAcs(voltac.VoltAcs).VoltAcs, VoltAcsTolerance);
        }

        [Test]
        public void ArithmeticOperators()
        {
            AcElectricPotential v = AcElectricPotential.FromVoltAcs(1);
            Assert.AreEqual(-1, -v.VoltAcs, VoltAcsTolerance);
            Assert.AreEqual(2, (AcElectricPotential.FromVoltAcs(3)-v).VoltAcs, VoltAcsTolerance);
            Assert.AreEqual(2, (v + v).VoltAcs, VoltAcsTolerance);
            Assert.AreEqual(10, (v*10).VoltAcs, VoltAcsTolerance);
            Assert.AreEqual(10, (10*v).VoltAcs, VoltAcsTolerance);
            Assert.AreEqual(2, (AcElectricPotential.FromVoltAcs(10)/5).VoltAcs, VoltAcsTolerance);
            Assert.AreEqual(2, AcElectricPotential.FromVoltAcs(10)/AcElectricPotential.FromVoltAcs(5), VoltAcsTolerance);
        }

        [Test]
        public void ComparisonOperators()
        {
            AcElectricPotential oneVoltAc = AcElectricPotential.FromVoltAcs(1);
            AcElectricPotential twoVoltAcs = AcElectricPotential.FromVoltAcs(2);

            Assert.True(oneVoltAc < twoVoltAcs);
            Assert.True(oneVoltAc <= twoVoltAcs);
            Assert.True(twoVoltAcs > oneVoltAc);
            Assert.True(twoVoltAcs >= oneVoltAc);

            Assert.False(oneVoltAc > twoVoltAcs);
            Assert.False(oneVoltAc >= twoVoltAcs);
            Assert.False(twoVoltAcs < oneVoltAc);
            Assert.False(twoVoltAcs <= oneVoltAc);
        }

        [Test]
        public void CompareToIsImplemented()
        {
            AcElectricPotential voltac = AcElectricPotential.FromVoltAcs(1);
            Assert.AreEqual(0, voltac.CompareTo(voltac));
            Assert.Greater(voltac.CompareTo(AcElectricPotential.Zero), 0);
            Assert.Less(AcElectricPotential.Zero.CompareTo(voltac), 0);
        }

        [Test]
        [ExpectedException(typeof(ArgumentException))]
        public void CompareToThrowsOnTypeMismatch()
        {
            AcElectricPotential voltac = AcElectricPotential.FromVoltAcs(1);
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            voltac.CompareTo(new object());
        }

        [Test]
        [ExpectedException(typeof(ArgumentNullException))]
        public void CompareToThrowsOnNull()
        {
            AcElectricPotential voltac = AcElectricPotential.FromVoltAcs(1);
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            voltac.CompareTo(null);
        }


        [Test]
        public void EqualityOperators()
        {
            AcElectricPotential a = AcElectricPotential.FromVoltAcs(1);
            AcElectricPotential b = AcElectricPotential.FromVoltAcs(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Test]
        public void EqualsIsImplemented()
        {
            AcElectricPotential v = AcElectricPotential.FromVoltAcs(1);
            Assert.IsTrue(v.Equals(AcElectricPotential.FromVoltAcs(1)));
            Assert.IsFalse(v.Equals(AcElectricPotential.Zero));
        }

        [Test]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            AcElectricPotential voltac = AcElectricPotential.FromVoltAcs(1);
            Assert.IsFalse(voltac.Equals(new object()));
        }

        [Test]
        public void EqualsReturnsFalseOnNull()
        {
            AcElectricPotential voltac = AcElectricPotential.FromVoltAcs(1);
            Assert.IsFalse(voltac.Equals(null));
        }
    }
}
