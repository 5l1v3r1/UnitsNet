<#@ assembly name="$(TargetDir)UnitsNet.net35.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="UnitsNet" #>
<#@ import namespace="UnitsNet.Attributes" #>
<#@ import namespace="UnitsNet.Extensions" #>

<#/* Uncomment below for intellisense/ReSharper support, 
but this will give an error when trying to run __Regenerate.tt template 
since they are included multiple times and once="true" does not
seem to work as it should. */#>

<#//@ include file="MultipleOutputHelper.ttinclude" once="true"#>
<#//@ include file="Shared.ttinclude" once="true"#><#+

    private void GenerateUnitClass(Type unitAttributeType, Manager manager, string className, Unit baseUnit, string xmlDocSummary)
    {
        using (manager.StartNewFile(className+"Unit.g.cs"))
        {
            Dictionary<Unit, UnitAttribute> unitToAttribute = GetUnitToAttributeDictionary(unitAttributeType);

            Unit[] orderedClassUnits = unitToAttribute
                .Keys
                .OrderBy(unit => unit.ToString())
                .ToArray();

            Unit[] orderedClassUnitsExceptBaseUnit =
                orderedClassUnits
                    .Except(new[] {baseUnit})
                    .OrderBy(unit => unit.ToString())
                    .ToArray();

            string baseUnitPluralName = GetUnitPluralName(unitToAttribute, baseUnit);
#>
// Copyright © 2007 by Initial Force AS.  All rights reserved.
// https://github.com/InitialForce/SIUnits
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// ReSharper disable once CheckNamespace
namespace UnitsNet
{
    /// <summary>
    /// <#=xmlDocSummary #>
    /// </summary>
    public partial struct <#=className #> : IComparable, IComparable<<#=className #>>
    {
        /// <summary>
        /// Base unit of <#=className #>.
        /// </summary>
        public readonly double <#=baseUnitPluralName #>;

        public <#=className #>(double <#=baseUnitPluralName.ToLowerInvariant() #>) : this()
        {
            <#=baseUnitPluralName #> = <#=baseUnitPluralName.ToLowerInvariant() #>;
        }

        #region Unit Properties

<#+
    foreach (Unit unit in orderedClassUnitsExceptBaseUnit)
    {
        string propertyName = GetUnitPluralName(unitToAttribute, unit);

         // Example: Kilometer has slope 1000, meaning for every kilometer the base unit increases with 1000 meters.         // a: 1000         // b: 0         // y: base unit value in meters         // x: unit value in kilometers         // new Length(2000).Kilometers => (y - b) / a = (2000 - 0) / 1000 = 2km         // Length.FromKilometers(2) => y = ax + b = 1000*2 + 0 = 2000m
        LinearFunction linearFunc = unitToAttribute[unit].LinearMappingFromBaseUnit;
        /*
        Example:
        public double Kilonewtons
        {
            get { return (Newtons - 0) / 1E3; }
        }
        */
#>
        /// <summary>
        /// Get <#=className#> in <#=propertyName#>.
        /// </summary>
        /// <remarks>Example: x = (y - b) / a where x is value in <#=propertyName#> and y is value in base unit <#=baseUnitPluralName#>.</remarks>
        public double <#=propertyName #>
        {
            get { return (<#=baseUnitPluralName#> - (<#=linearFunc.b#>)) / <#=linearFunc.a#>; }
        }

<#+
    }
#>
        #endregion

        #region Static 

        public static <#=className #> Zero
        {
            get { return new <#=className #>(); }
        }
        
<#+
            // First unit is the base unit and already a public field, so skip making a property for it.
            foreach (Unit unit in orderedClassUnits)
            {
                string methodNamePostfix = GetUnitPluralName(unitToAttribute, unit);
                string valueParamName = methodNamePostfix.ToLowerInvariant();

                // Example: Kilometer has slope 1000, meaning for every kilometer the base unit increases with 1000 meters.
                // a: 1000
                // b: 0
                // y: base unit value in meters
                // x: unit value in kilometers
                // new Length(2000).Kilometers => (y - b) / a = (2000 - 0) / 1000 = 2km
                // Length.FromKilometers(2) => y = ax + b = 1000*2 + 0 = 2000m
                LinearFunction linearFunc = unitToAttribute[unit].LinearMappingFromBaseUnit;
                /*
        Example:
        public static Force FromKilonewtons(double kilonewtons)
        {
            return new Force(1E3 * kilonewtons + 0);
        }
        */
#>
        /// <summary>
        /// Get <#=className#> from <#=methodNamePostfix#>.
        /// </summary>
        /// <remarks>Example: y = ax + b where x is value in <#=methodNamePostfix#> and y is value in base unit <#=baseUnitPluralName#>.</remarks>
        public static <#=className #> From<#=methodNamePostfix #>(double <#=valueParamName #>)
        {
            return new <#=className #>(<#=linearFunc.a#> * <#=valueParamName#> + <#=linearFunc.b#>);
        }

<#+
            }
#>
        #endregion

        #region Arithmetic Operators

        public static <#=className #> operator -(<#=className #> right)
        {
            return new <#=className #>(-right.<#=baseUnitPluralName #>);
        }

        public static <#=className #> operator +(<#=className #> left, <#=className #> right)
        {
            return new <#=className #>(left.<#=baseUnitPluralName #> + right.<#=baseUnitPluralName #>);
        }

        public static <#=className #> operator -(<#=className #> left, <#=className #> right)
        {
            return new <#=className #>(left.<#=baseUnitPluralName #> - right.<#=baseUnitPluralName #>);
        }

        public static <#=className #> operator *(double left, <#=className #> right)
        {
            return new <#=className #>(left*right.<#=baseUnitPluralName #>);
        }

        public static <#=className #> operator *(<#=className #> left, double right)
        {
            return new <#=className #>(left.<#=baseUnitPluralName #>*right);
        }

        public static <#=className #> operator /(<#=className #> left, double right)
        {
            return new <#=className #>(left.<#=baseUnitPluralName #>/right);
        }

        public static double operator /(<#=className #> left, <#=className #> right)
        {
            return left.<#=baseUnitPluralName #>/right.<#=baseUnitPluralName #>;
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is <#=className #>)) throw new ArgumentException("Expected type <#=className #>.", "obj");
            return CompareTo((<#=className #>) obj);
        }

        public int CompareTo(<#=className #> other)
        {
            return <#=baseUnitPluralName #>.CompareTo(other.<#=baseUnitPluralName #>);
        }

        public static bool operator <=(<#=className #> left, <#=className #> right)
        {
            return left.<#=baseUnitPluralName #> <= right.<#=baseUnitPluralName #>;
        }

        public static bool operator >=(<#=className #> left, <#=className #> right)
        {
            return left.<#=baseUnitPluralName #> >= right.<#=baseUnitPluralName #>;
        }

        public static bool operator <(<#=className #> left, <#=className #> right)
        {
            return left.<#=baseUnitPluralName #> < right.<#=baseUnitPluralName #>;
        }

        public static bool operator >(<#=className #> left, <#=className #> right)
        {
            return left.<#=baseUnitPluralName #> > right.<#=baseUnitPluralName #>;
        }

        public static bool operator ==(<#=className #> left, <#=className #> right)
        {
            return left.<#=baseUnitPluralName #> == right.<#=baseUnitPluralName #>;
        }

        public static bool operator !=(<#=className #> left, <#=className #> right)
        {
            return left.<#=baseUnitPluralName #> != right.<#=baseUnitPluralName #>;
        }

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return <#=baseUnitPluralName #>.Equals(((<#=className #>) obj).<#=baseUnitPluralName #>);
        }

        public override int GetHashCode()
        {
            return <#=baseUnitPluralName #>.GetHashCode();
        }

        #endregion

        public override string ToString()
        {
            return string.Format("{0:0.##} {1}", <#=baseUnitPluralName #>, UnitSystem.Create().GetDefaultAbbreviation(Unit.<#=baseUnit #>));
        }
    }
} 
<#+
        }
    }
#>