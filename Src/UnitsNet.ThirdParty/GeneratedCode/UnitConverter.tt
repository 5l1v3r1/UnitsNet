<#@ template debug="true" language="C#" hostspecific="true" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="UnitsNet.ThirdParty" #>
<#@ import namespace="UnitsNet.ThirdParty.GeneratedCode" #>
<#@ import namespace="UnitsNet.ThirdParty.Attributes" #>
<#@ output extension=".g.cs" #>
<# 
    GenerateUnitConverter<ThirdPartyUnitAttribute, FooUnit>(); 
    //GenerateUnitConverter<ThirdPartyUnitAttribute, BarUnit>(); 
#><#+ 

private void GenerateUnitConverter<TBaseUnitAttribute, TUnit>() where TBaseUnitAttribute : Attribute
{ 
    Dictionary<TUnit, IUnitAttribute<TUnit>> unitToAttribute =
    TemplateUtils.GetUnitToAttributeDictionary<TBaseUnitAttribute, TUnit>(); 

    var unitAttributes = unitToAttribute.Values.Distinct().ToList();
    List<string> unitClassNames = unitAttributes.Select(attr => attr.GetType().Name.Replace("Attribute", "")).ToList();
    List<Type> unitAttributeTypes = unitAttributes.Select(attr => attr.GetType()).ToList();

    string unitEnumName = typeof(TUnit).Name;
#>
// Copyright © 2007 by Initial Force AS.  All rights reserved.
// https://github.com/InitialForce/SIUnits
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// ReSharper disable once CheckNamespace
namespace UnitsNet.ThirdParty
{
    /// <summary>
    /// Dynamically convert between compatible units only known at runtime.
    /// </summary>
    public static class UnitConverter
    {
        /// <summary>
        /// Dynamically convert between two compatible units only known at runtime, such as converting from millimeters to meters.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <param name="toUnit">Compatible unit to convert to.</param>
        /// <returns>Value in new unit.</returns> 
        /// <exception cref="Exception">If the two units are not compatible.</exception>
        public static double Convert(double value, <#=unitEnumName#> fromUnit, <#=unitEnumName#> toUnit)
        {
            if (fromUnit == toUnit)
                return value;

            double newValue;
<#+      foreach (string unitName in unitClassNames) #>
<#+      { #>
            if (TryConvertFrom<#=unitName #>(value, fromUnit, toUnit, out newValue)) return newValue;
<#+ } #>

            throw new Exception(
                string.Format("Conversion from unit [{0}] to [{1}] is either not valid or not yet implemented.",
                              fromUnit, toUnit));
        }

        /// <summary>
        /// Dynamically convert between two compatible units only known at runtime, such as converting from millimeters to meters.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <param name="toUnit">Compatible unit to convert to.</param>
        /// <param name="newValue">Value in new unit if successful, zero otherwise.</param>
        /// <returns>True if the two units were compatible and the conversion was successful.</returns> 
        public static bool TryConvert(double value, <#=unitEnumName#> fromUnit, <#=unitEnumName#> toUnit, out double newValue)
        {
            if (fromUnit == toUnit)
            {
                newValue = value;
                return true;
            }
 
<#+      foreach (string unitName in unitClassNames) #>
<#+      { #>
            if (TryConvertFrom<#=unitName #>(value, fromUnit, toUnit, out newValue)) return true;
<#+ } #>

            return false;
        }

        #region Private

<#+      foreach (string unitClassName in unitClassNames) #>
<#+      { #>
<#+          List<TUnit> unitsOfUnitClass = TemplateUtils.GetUnitsOfUnitClass(unitClassName, unitAttributeTypes, unitToAttribute); #>

        /// <summary>
        /// Try to dynamically convert from <#=unitClassName #> to <paramref name="toUnit"/>.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <param name="toUnit">Compatible unit to convert to.</param>
        /// <param name="newValue">Value in new unit if successful, zero otherwise.</param>
        /// <returns>True if the two units were compatible and the conversion was successful.</returns> 
        private static bool TryConvertFrom<#=unitClassName #>(double value, <#=unitEnumName#> fromUnit, <#=unitEnumName#> toUnit, out double newValue)
        {
            switch (fromUnit)
            {
<#+         foreach (TUnit unit in unitsOfUnitClass) #>
<#+         { #>
<#+             string pluralUnitName = TemplateUtils.GetUnitPluralName(unitToAttribute, unit); #>
                case <#=unitEnumName#>.<#=unit.ToString() #>:
                    return TryConvert(<#=unitClassName #>.From<#=pluralUnitName #>(value), toUnit, out newValue);
<#+ } #>

                default:
                    newValue = 0;
                    return false;
            }
        }
<#+ } #>

<#+ foreach (string unitClassName in unitClassNames) #>
<#+ { #>
<#+     List<TUnit> unitsOfUnitClass = TemplateUtils.GetUnitsOfUnitClass(unitClassName, unitAttributeTypes,
    unitToAttribute); #>

        /// <summary>
        /// Try to dynamically convert from <#=unitClassName #> to <paramref name="toUnit"/>.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="toUnit">Compatible unit to convert to.</param>
        /// <param name="newValue">Value in new unit if successful, zero otherwise.</param>
        /// <returns>True if the two units were compatible and the conversion was successful.</returns> 
        private static bool TryConvert(<#=unitClassName #> value, <#=unitEnumName#> toUnit, out double newValue)
        {
            switch (toUnit)
            {
<#+         foreach (TUnit unit in unitsOfUnitClass) #>
<#+         { #>
                case <#=unitEnumName#>.<#=unit.ToString() #>:
                    newValue = value.<#=TemplateUtils.GetUnitPluralName(unitToAttribute, unit) #>;
                    return true;
<#+ } #>

                default:
                    newValue = 0;
                    return false;
            }
        }

<#+ } #> 
        #endregion
    }
}

<#+
} // private void GenerateUnitConverter(Manager m) 

#>