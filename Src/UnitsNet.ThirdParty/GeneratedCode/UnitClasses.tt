<#@ template debug="true" language="C#" hostspecific="true" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="$(TargetDir)UnitsNet.pcl.dll" #>
<#@ import namespace="UnitsNet.Attributes" #>
<#@ import namespace="UnitsNet.Templating" #>
<#@ import namespace="UnitsNet.ThirdParty.Units" #>
<#@ include file="Includes\MultipleOutputHelper.ttinclude" once="true"#>
<#@ output extension=".g.cs" #>
<#
    var assembly = Assembly.GetAssembly(typeof (FooUnit));
    IEnumerable<UnitClassInfo> infos = TemplateUtils.GetUnitClasses(assembly);

    var m = Manager.Create(Host, GenerationEnvironment);
    foreach (UnitClassInfo info in infos)
    {
        GenerateUnitClass(m, info.UnitClassName, info.UnitClassXmlDoc, info.BaseUnitName, info.BaseUnitPluralName, info.UnitEnumType.Name, info.OrderedUnits);
    }
    
    m.Process(split: true);

#><#+ 
    private void GenerateUnitClass(Manager manager, string className, string xmlDocSummary, string baseUnitName, string baseUnitPluralName, string unitEnumName, ICollection<UnitInfo> orderedClassUnits)
    {
        using (manager.StartNewFile(className + ".g.cs"))
        { 
        List<UnitInfo> orderedClassUnitsExceptBaseUnit =
                orderedClassUnits
                    .Where(val => val.SingularName != baseUnitName)
                    .ToList(); 
#>
// Copyright © 2007 by Initial Force AS.  All rights reserved.
// https://github.com/InitialForce/SIUnits
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.ThirdParty.Units;

// ReSharper disable once CheckNamespace
namespace UnitsNet
{
    /// <summary>
    /// <#=xmlDocSummary #>
    /// </summary>
    public partial struct <#=className #> : IComparable, IComparable<<#=className #>>
    {
        /// <summary>
        /// Base unit of <#=className #>.
        /// </summary>
        public readonly double <#=baseUnitPluralName #>;

        public <#=className #>(double <#=baseUnitPluralName.ToLowerInvariant() #>) : this()
        {
            <#=baseUnitPluralName #> = <#=baseUnitPluralName.ToLowerInvariant() #>;
        }

        #region Properties

<#+
    foreach (UnitInfo unit in orderedClassUnitsExceptBaseUnit)
    {
        string propertyName = unit.PluralName;
        LinearFunction linearFunc = unit.LinearFunction;
        // Example: Kilometer has slope 1000, meaning for every kilometer the base unit increases with 1000 meters.
        // a: 1000
        // b: 0
        // y: base unit value in meters
        // x: unit value in kilometers
        // new Length(2000).Kilometers => (y - b) / a = (2000 - 0) / 1000 = 2km
        // Length.FromKilometers(2) => y = ax + b = 1000*2 + 0 = 2000m
        //
        // Example:
        // public double Kilonewtons
        // {
        //     get { return (Newtons - 0) / 1E3; }
        // }
        
#>
        /// <summary>
        /// Get <#=className#> in <#=propertyName#>.
        /// </summary>
        /// <remarks>Example: x = (y - b) / a where x is value in <#=propertyName#> and y is value in base unit <#=baseUnitPluralName#>.</remarks>
        public double <#=propertyName #>
        {<#+ if (linearFunc.b == 0) {#> 
            get { return <#=baseUnitPluralName#> / <#=linearFunc.a#>; }
<#+} else {#>            
            get { return (<#=baseUnitPluralName#> - <#=linearFunc.b#>) / <#=linearFunc.a#>; }
<#+}#>
        }

<#+
    }
#>
        #endregion

        #region Static 

        public static <#=className #> Zero
        {
            get { return new <#=className #>(); }
        }
        
<#+
            // First unit is the base unit and already a public field, so skip making a property for it.
            foreach (UnitInfo unit in orderedClassUnits)
            {
                string methodNamePostfix = unit.PluralName;
                string valueParamName = methodNamePostfix.ToLowerInvariant();
                LinearFunction linearFunc = unit.LinearFunction; 
                // Example: Kilometer has slope 1000, meaning for every kilometer the base unit increases with 1000 meters.
                // a: 1000
                // b: 0
                // y: base unit value in meters
                // x: unit value in kilometers
                // new Length(2000).Kilometers => (y - b) / a = (2000 - 0) / 1000 = 2km
                // Length.FromKilometers(2) => y = ax + b = 1000*2 + 0 = 2000m
                //
                // Example:
                // public static Force FromKilonewtons(double kilonewtons)
                // {
                //     return new Force(1E3 * kilonewtons + 0);
                // }
#>
        /// <summary>
        /// Get <#=className#> from <#=methodNamePostfix#>.
        /// </summary>
        /// <remarks>Example: y = ax + b where x is value in <#=methodNamePostfix#> and y is value in base unit <#=baseUnitPluralName#>.</remarks>
        public static <#=className #> From<#=methodNamePostfix #>(double <#=valueParamName #>)
        {<#+ if (linearFunc.b == 0) {#> 
            return new <#=className #>(<#=linearFunc.a#> * <#=valueParamName#>);
<#+} else {#>            
            return new <#=className #>(<#=linearFunc.a#> * <#=valueParamName#> + <#=linearFunc.b#>);
<#+}#>
        }

<#+
            }
#>
        /// <summary>
        /// Try to dynamically convert from <#=className #> to <paramref name="toUnit"/>.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns><#=className#> unit value.</returns> 
        public static <#=className#> From(double value, <#= unitEnumName#> fromUnit)
        {
            switch (fromUnit)
            {
<#+         foreach (UnitInfo unit in orderedClassUnits) #>
<#+         { 
                string pluralUnitName = unit.PluralName;
#>
                case <#=unitEnumName#>.<#=unit.SingularName#>:
                    return From<#=pluralUnitName #>(value);
<#+         } #>

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
        #endregion

        #region Arithmetic Operators

        public static <#=className #> operator -(<#=className #> right)
        {
            return new <#=className #>(-right.<#=baseUnitPluralName #>);
        }

        public static <#=className #> operator +(<#=className #> left, <#=className #> right)
        {
            return new <#=className #>(left.<#=baseUnitPluralName #> + right.<#=baseUnitPluralName #>);
        }

        public static <#=className #> operator -(<#=className #> left, <#=className #> right)
        {
            return new <#=className #>(left.<#=baseUnitPluralName #> - right.<#=baseUnitPluralName #>);
        }

        public static <#=className #> operator *(double left, <#=className #> right)
        {
            return new <#=className #>(left*right.<#=baseUnitPluralName #>);
        }

        public static <#=className #> operator *(<#=className #> left, double right)
        {
            return new <#=className #>(left.<#=baseUnitPluralName #>*right);
        }

        public static <#=className #> operator /(<#=className #> left, double right)
        {
            return new <#=className #>(left.<#=baseUnitPluralName #>/right);
        }

        public static double operator /(<#=className #> left, <#=className #> right)
        {
            return left.<#=baseUnitPluralName #>/right.<#=baseUnitPluralName #>;
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is <#=className #>)) throw new ArgumentException("Expected type <#=className #>.", "obj");
            return CompareTo((<#=className #>) obj);
        }

        public int CompareTo(<#=className #> other)
        {
            return <#=baseUnitPluralName #>.CompareTo(other.<#=baseUnitPluralName #>);
        }

        public static bool operator <=(<#=className #> left, <#=className #> right)
        {
            return left.<#=baseUnitPluralName #> <= right.<#=baseUnitPluralName #>;
        }

        public static bool operator >=(<#=className #> left, <#=className #> right)
        {
            return left.<#=baseUnitPluralName #> >= right.<#=baseUnitPluralName #>;
        }

        public static bool operator <(<#=className #> left, <#=className #> right)
        {
            return left.<#=baseUnitPluralName #> < right.<#=baseUnitPluralName #>;
        }

        public static bool operator >(<#=className #> left, <#=className #> right)
        {
            return left.<#=baseUnitPluralName #> > right.<#=baseUnitPluralName #>;
        }

        public static bool operator ==(<#=className #> left, <#=className #> right)
        {
            return left.<#=baseUnitPluralName #> == right.<#=baseUnitPluralName #>;
        }

        public static bool operator !=(<#=className #> left, <#=className #> right)
        {
            return left.<#=baseUnitPluralName #> != right.<#=baseUnitPluralName #>;
        }

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return <#=baseUnitPluralName #>.Equals(((<#=className #>) obj).<#=baseUnitPluralName #>);
        }

        public override int GetHashCode()
        {
            return <#=baseUnitPluralName #>.GetHashCode();
        }

        #endregion
        
        #region Conversion
 
        /// <summary>
        /// Try to dynamically convert from <#=className #> to <paramref name="toUnit"/>.
        /// </summary>
        /// <param name="toUnit">Compatible unit to convert to.</param>
        /// <param name="newValue">Value in new unit if successful, zero otherwise.</param>
        /// <returns>True if the two units were compatible and the conversion was successful.</returns> 
        public bool TryConvert(<#=unitEnumName#> toUnit, out double newValue)
        {
            switch (toUnit)
            {
<#+         foreach (UnitInfo unit in orderedClassUnits) #>
<#+         { #>
                case <#=unitEnumName#>.<#=unit.SingularName#>:
                    newValue = <#=unit.PluralName#>;
                    return true;
<#+         } #>

                default:
                    newValue = 0;
                    return false;
            }
        }

        /// <summary>
        /// Dynamically convert from <#=className #> to <paramref name="toUnit"/>.
        /// </summary>
        /// <param name="toUnit">Compatible unit to convert to.</param>
        /// <returns>Value in new unit if successful, exception otherwise.</returns> 
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double Convert(<#=unitEnumName#> toUnit)
        {
            double newValue;
            if (!TryConvert(toUnit, out newValue))
                throw new NotImplementedException("toUnit: " + toUnit);

            return newValue;
        }

        #endregion

        public override string ToString()
        {
            return string.Format("{0:0.##} {1}", <#=baseUnitPluralName #>, UnitSystem.GetCached().GetDefaultAbbreviation(<#=unitEnumName#>.<#=baseUnitName#>));
        }
    }
} 
<#+
        } // using
    } // GenerateUnitClass()
#>
<#+
#>